<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="03de08ac-fd37-4f38-ae33-dc113f4d10c8" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Status.java" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Task.java" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="otus-pro-homeworks" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="otus-pro-homeworks" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="otus-pro-homeworks" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
                <item name="build" type="c8890929:TasksNode$1" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="AnnotationType" />
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2mEYPu3STopufuLXHar9R1qrTau" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Gradle.AccountServiceImplParametrizedTest.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Build otus-pro-homeworks.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Tests in 'impl'.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Tests in 'ru.otus.java.pro.unittests.bank.service.impl'.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Upgrade Gradle wrapper.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [:Application.main()].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [:Main.main()].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [build].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [dependencies].executor&quot;: &quot;Run&quot;,
    &quot;JUnit.AccountServiceImplParametrizedTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.AccountServiceImplTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ru.otus.java.pro.unittests.bank.service.impl in otus-pro-homeworks.main.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
    &quot;create.test.in.the.same.root&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/xa86/IdeaProjects/learning-project/otus-pro-homeworks/src/main/test/ru/otus/java/pro/unittests/bank/service/impl&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.lookFeel&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\xa86\IdeaProjects\learning-project\otus-pro-homeworks\src\main\test\ru\otus\java\pro\unittests\bank\service\impl" />
      <recent name="C:\Users\xa86\IdeaProjects\learning-project\otus-pro-homeworks\src\main\java\ru\otus\java\pro\unittests\bank" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="ru.otus.java.pro.unittests.bank.service.impl" />
    </key>
  </component>
  <component name="RunManager" selected="Application.ru.otus.java.pro.streamapi.Main">
    <configuration name="Application" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ru.otus.java.pro.reflection.Application" />
      <module name="otus-pro-homeworks.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ru.otus.java.pro.reflection.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ru.otus.java.pro.unittests.bank.Main" />
      <module name="otus-pro-homeworks.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ru.otus.java.pro.unittests.bank.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="ru.otus.java.pro.streamapi.Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ru.otus.java.pro.streamapi.Main" />
      <module name="otus-pro-homeworks.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ru.otus.java.pro.streamapi.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="AccountServiceImplParametrizedTest" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;impl.AccountServiceImplParametrizedTest&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>true</RunAsTest>
      <method v="2" />
    </configuration>
    <configuration name="Tests in 'ru.otus.java.pro.unittests.bank.service.impl'" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;ru.otus.java.pro.unittests.bank.service.impl.*&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>true</RunAsTest>
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Application.ru.otus.java.pro.streamapi.Main" />
        <item itemvalue="Application.Application" />
        <item itemvalue="Gradle.Tests in 'ru.otus.java.pro.unittests.bank.service.impl'" />
        <item itemvalue="Application.Main" />
        <item itemvalue="Gradle.AccountServiceImplParametrizedTest" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240" />
        <option value="bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="03de08ac-fd37-4f38-ae33-dc113f4d10c8" name="Changes" comment="" />
      <created>1726643186346</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1726643186346</updated>
      <workItem from="1726643187429" duration="738000" />
      <workItem from="1726643970714" duration="3310000" />
      <workItem from="1727240860064" duration="2417000" />
    </task>
    <task id="LOCAL-00001" summary="master-commit">
      <option name="closed" value="true" />
      <created>1726644698594</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1726644698594</updated>
    </task>
    <task id="LOCAL-00002" summary="Homework Reflection API и аннотации">
      <option name="closed" value="true" />
      <created>1726647111288</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1726647111288</updated>
    </task>
    <task id="LOCAL-00003" summary="Homework Reflection API и аннотации v2">
      <option name="closed" value="true" />
      <created>1727241031646</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1727241031646</updated>
    </task>
    <option name="localTasksCounter" value="4" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="master-commit" />
    <MESSAGE value="Homework Reflection API и аннотации" />
    <MESSAGE value="Homework Reflection API и аннотации v2" />
    <option name="LAST_COMMIT_MESSAGE" value="Homework Reflection API и аннотации v2" />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="0d27cd">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                </list>
              </option>
              <option name="id" value="0d27cd" />
              <option name="initiateTms" value="1728548565829" />
              <option name="request" value=" Давай Status и Task положим в отдельный пакет" />
              <option name="response" value="" />
              <option name="responseDescription" value="Хорошо, давайте создадим новый пакет, например, `ru.otus.java.pro.streamapi.model`, и переместим туда классы `Status` и `Task`.&#10;&#10;### Шаг 1: Создание нового пакета и перемещение классов&#10;&#10;Создайте новый пакет `ru.otus.java.pro.streamapi.model` и переместите туда файлы `Status.java` и `Task.java`.&#10;&#10;### Новый файл `Status.java`&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi.model;&#10;&#10;public enum Status {&#10;    OPEN, IN_PROGRESS, CLOSED&#10;}&#10;```&#10;&#10;### Обновленный файл `Task.java`&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi.model;&#10;&#10;public class Task {&#10;    private final int id;&#10;    private final String name;&#10;    private final Status status;&#10;&#10;    public Task(int id, String name, Status status) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.status = status;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public Status getStatus() {&#10;        return status;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Task{&quot; +&#10;                &quot;id=&quot; + id +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, status=&quot; + status +&#10;                '}';&#10;    }&#10;}&#10;```&#10;&#10;### Шаг 2: Обновление класса `Main`&#10;&#10;Теперь обновим класс `Main` для использования новых путей к классам `Status` и `Task`.&#10;&#10;### Обновленный файл `Main.java`&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi;&#10;&#10;import ru.otus.java.pro.streamapi.model.Status;&#10;import ru.otus.java.pro.streamapi.model.Task;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        List&lt;Task&gt; tasks = Arrays.asList(&#10;                new Task(1, &quot;Task 1&quot;, Status.OPEN),&#10;                new Task(2, &quot;Task 2&quot;, Status.IN_PROGRESS),&#10;                new Task(3, &quot;Task 3&quot;, Status.CLOSED),&#10;                new Task(4, &quot;Task 4&quot;, Status.OPEN),&#10;                new Task(5, &quot;Task 5&quot;, Status.IN_PROGRESS)&#10;        );&#10;&#10;        // Получение списка задач по выбранному статусу&#10;        List&lt;Task&gt; openTasks = getTasksByStatus(tasks, Status.OPEN);&#10;        System.out.println(&quot;Open Tasks: &quot; + openTasks);&#10;&#10;        // Проверка наличия задачи с указанным ID&#10;        boolean hasTaskWithId = hasTaskWithId(tasks, 3);&#10;        System.out.println(&quot;Has task with ID 3: &quot; + hasTaskWithId);&#10;&#10;        // Получение списка задач в отсортированном по статусу виде&#10;        List&lt;Task&gt; sortedTasks = getTasksSortedByStatus(tasks);&#10;        System.out.println(&quot;Sorted Tasks: &quot; + sortedTasks);&#10;&#10;        // Подсчет количества задач по определенному статусу&#10;        long countOpenTasks = countTasksByStatus(tasks, Status.OPEN);&#10;        System.out.println(&quot;Count of Open Tasks: &quot; + countOpenTasks);&#10;    }&#10;&#10;    public static List&lt;Task&gt; getTasksByStatus(List&lt;Task&gt; tasks, Status status) {&#10;        return tasks.stream()&#10;                .filter(task -&gt; task.getStatus() == status)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public static boolean hasTaskWithId(List&lt;Task&gt; tasks, int id) {&#10;        return tasks.stream()&#10;                .anyMatch(task -&gt; task.getId() == id);&#10;    }&#10;&#10;    public static List&lt;Task&gt; getTasksSortedByStatus(List&lt;Task&gt; tasks) {&#10;        return tasks.stream()&#10;                .sorted((task1, task2) -&gt; {&#10;                    if (task1.getStatus() == task2.getStatus()) {&#10;                        return 0;&#10;                    }&#10;                    if (task1.getStatus() == Status.OPEN) {&#10;                        return -1;&#10;                    }&#10;                    if (task1.getStatus() == Status.IN_PROGRESS) {&#10;                        return task2.getStatus() == Status.OPEN ? 1 : -1;&#10;                    }&#10;                    return 1;&#10;                })&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public static long countTasksByStatus(List&lt;Task&gt; tasks, Status status) {&#10;        return tasks.stream()&#10;                .filter(task -&gt; task.getStatus() == status)&#10;                .count();&#10;    }&#10;}&#10;```&#10;&#10;Теперь классы `Status` и `Task` находятся в отдельном пакете `ru.otus.java.pro.streamapi.model`, что улучшает организацию кода и делает его более модульным." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1728548581406" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="3f2946">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                </list>
              </option>
              <option name="id" value="3f2946" />
              <option name="initiateTms" value="1728548462199" />
              <option name="request" value=" Имеется список объектов класса Задача (ID, название, статус). С помощью Stream API реализуйте:&#10;&#10;    Получение списка задач по выбранному статусу;&#10;    Проверка наличия задачи с указанным ID;&#10;    Получение списка задач в отсортированном по статусу виде: открыта, в работе, закрыта (можете выбирать любой статус и любой порядок, главное чтобы было 3 разных статуса);&#10;    Подсчет количества задач по определенному статусу." />
              <option name="response" value="" />
              <option name="responseDescription" value="Для выполнения этих задач с использованием Stream API, сначала создадим класс `Task` с полями `id`, `name` и `status`. Затем реализуем методы для выполнения указанных операций.&#10;&#10;### Шаг 1: Создание класса `Task`&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi;&#10;&#10;public class Task {&#10;    private final int id;&#10;    private final String name;&#10;    private final Status status;&#10;&#10;    public Task(int id, String name, Status status) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.status = status;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public Status getStatus() {&#10;        return status;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Task{&quot; +&#10;                &quot;id=&quot; + id +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, status=&quot; + status +&#10;                '}';&#10;    }&#10;&#10;    public enum Status {&#10;        OPEN, IN_PROGRESS, CLOSED&#10;    }&#10;}&#10;```&#10;&#10;### Шаг 2: Реализация методов в классе `Main`&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        List&lt;Task&gt; tasks = Arrays.asList(&#10;                new Task(1, &quot;Task 1&quot;, Task.Status.OPEN),&#10;                new Task(2, &quot;Task 2&quot;, Task.Status.IN_PROGRESS),&#10;                new Task(3, &quot;Task 3&quot;, Task.Status.CLOSED),&#10;                new Task(4, &quot;Task 4&quot;, Task.Status.OPEN),&#10;                new Task(5, &quot;Task 5&quot;, Task.Status.IN_PROGRESS)&#10;        );&#10;&#10;        // Получение списка задач по выбранному статусу&#10;        List&lt;Task&gt; openTasks = getTasksByStatus(tasks, Task.Status.OPEN);&#10;        System.out.println(&quot;Open Tasks: &quot; + openTasks);&#10;&#10;        // Проверка наличия задачи с указанным ID&#10;        boolean hasTaskWithId = hasTaskWithId(tasks, 3);&#10;        System.out.println(&quot;Has task with ID 3: &quot; + hasTaskWithId);&#10;&#10;        // Получение списка задач в отсортированном по статусу виде&#10;        List&lt;Task&gt; sortedTasks = getTasksSortedByStatus(tasks);&#10;        System.out.println(&quot;Sorted Tasks: &quot; + sortedTasks);&#10;&#10;        // Подсчет количества задач по определенному статусу&#10;        long countOpenTasks = countTasksByStatus(tasks, Task.Status.OPEN);&#10;        System.out.println(&quot;Count of Open Tasks: &quot; + countOpenTasks);&#10;    }&#10;&#10;    public static List&lt;Task&gt; getTasksByStatus(List&lt;Task&gt; tasks, Task.Status status) {&#10;        return tasks.stream()&#10;                .filter(task -&gt; task.getStatus() == status)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public static boolean hasTaskWithId(List&lt;Task&gt; tasks, int id) {&#10;        return tasks.stream()&#10;                .anyMatch(task -&gt; task.getId() == id);&#10;    }&#10;&#10;    public static List&lt;Task&gt; getTasksSortedByStatus(List&lt;Task&gt; tasks) {&#10;        return tasks.stream()&#10;                .sorted((task1, task2) -&gt; {&#10;                    if (task1.getStatus() == task2.getStatus()) {&#10;                        return 0;&#10;                    }&#10;                    if (task1.getStatus() == Task.Status.OPEN) {&#10;                        return -1;&#10;                    }&#10;                    if (task1.getStatus() == Task.Status.IN_PROGRESS) {&#10;                        return task2.getStatus() == Task.Status.OPEN ? 1 : -1;&#10;                    }&#10;                    return 1;&#10;                })&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    public static long countTasksByStatus(List&lt;Task&gt; tasks, Task.Status status) {&#10;        return tasks.stream()&#10;                .filter(task -&gt; task.getStatus() == status)&#10;                .count();&#10;    }&#10;}&#10;```&#10;&#10;### Объяснение&#10;&#10;1. **Получение списка задач по выбранному статусу**:&#10;   Метод `getTasksByStatus` использует `filter` для выбора задач с указанным статусом и собирает их в список с помощью `collect(Collectors.toList())`.&#10;&#10;2. **Проверка наличия задачи с указанным ID**:&#10;   Метод `hasTaskWithId` использует `anyMatch` для проверки наличия задачи с указанным ID.&#10;&#10;3. **Получение списка задач в отсортированном по статусу виде**:&#10;   Метод `getTasksSortedByStatus` использует `sorted` для сортировки задач по статусу. В данном примере задачи сортируются в порядке: `OPEN`, `IN_PROGRESS`, `CLOSED`.&#10;&#10;4. **Подсчет количества задач по определенному статусу**:&#10;   Метод `countTasksByStatus` использует `filter` для выбора задач с указанным статусом и `count` для подсчета их количества.&#10;&#10;Эти методы демонстрируют использование Stream API для выполнения различных операций с коллекциями объектов." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1728548479167" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="579a9f">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Status.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Task.java" />
                </list>
              </option>
              <option name="id" value="579a9f" />
              <option name="initiateTms" value="1728548754381" />
              <option name="request" value=" Вместо комментариев над вызовами, давай добавим описание через javadoc над методами" />
              <option name="response" value="" />
              <option name="responseDescription" value="Конечно, добавление Javadoc комментариев над методами улучшит читаемость и документацию вашего кода. Давайте добавим Javadoc комментарии к каждому методу в классе `Main`.&#10;&#10;### Обновленный файл `Main.java` с Javadoc комментариями&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi;&#10;&#10;import ru.otus.java.pro.streamapi.model.Status;&#10;import ru.otus.java.pro.streamapi.model.Task;&#10;&#10;import java.util.Arrays;&#10;import java.util.List;&#10;import java.util.stream.Collectors;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        List&lt;Task&gt; tasks = Arrays.asList(&#10;                new Task(1, &quot;Task 1&quot;, Status.OPEN),&#10;                new Task(2, &quot;Task 2&quot;, Status.IN_PROGRESS),&#10;                new Task(3, &quot;Task 3&quot;, Status.CLOSED),&#10;                new Task(4, &quot;Task 4&quot;, Status.OPEN),&#10;                new Task(5, &quot;Task 5&quot;, Status.IN_PROGRESS)&#10;        );&#10;&#10;        List&lt;Task&gt; openTasks = getTasksByStatus(tasks, Status.OPEN);&#10;        System.out.println(&quot;Open Tasks: &quot; + openTasks);&#10;&#10;        boolean hasTaskWithId = hasTaskWithId(tasks, 3);&#10;        System.out.println(&quot;Has task with ID 3: &quot; + hasTaskWithId);&#10;&#10;        List&lt;Task&gt; sortedTasks = getTasksSortedByStatus(tasks);&#10;        System.out.println(&quot;Sorted Tasks: &quot; + sortedTasks);&#10;&#10;        long countOpenTasks = countTasksByStatus(tasks, Status.OPEN);&#10;        System.out.println(&quot;Count of Open Tasks: &quot; + countOpenTasks);&#10;    }&#10;&#10;    /**&#10;     * Получает список задач по выбранному статусу.&#10;     *&#10;     * @param tasks  список задач&#10;     * @param status статус для фильтрации задач&#10;     * @return список задач с указанным статусом&#10;     */&#10;    public static List&lt;Task&gt; getTasksByStatus(List&lt;Task&gt; tasks, Status status) {&#10;        return tasks.stream()&#10;                .filter(task -&gt; task.getStatus() == status)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Проверяет наличие задачи с указанным ID.&#10;     *&#10;     * @param tasks список задач&#10;     * @param id    ID задачи для проверки&#10;     * @return true, если задача с указанным ID существует, иначе false&#10;     */&#10;    public static boolean hasTaskWithId(List&lt;Task&gt; tasks, int id) {&#10;        return tasks.stream()&#10;                .anyMatch(task -&gt; task.getId() == id);&#10;    }&#10;&#10;    /**&#10;     * Получает список задач, отсортированных по статусу.&#10;     * Порядок сортировки: OPEN, IN_PROGRESS, CLOSED.&#10;     *&#10;     * @param tasks список задач&#10;     * @return отсортированный список задач&#10;     */&#10;    public static List&lt;Task&gt; getTasksSortedByStatus(List&lt;Task&gt; tasks) {&#10;        return tasks.stream()&#10;                .sorted((task1, task2) -&gt; {&#10;                    if (task1.getStatus() == task2.getStatus()) {&#10;                        return 0;&#10;                    }&#10;                    if (task1.getStatus() == Status.OPEN) {&#10;                        return -1;&#10;                    }&#10;                    if (task1.getStatus() == Status.IN_PROGRESS) {&#10;                        return task2.getStatus() == Status.OPEN ? 1 : -1;&#10;                    }&#10;                    return 1;&#10;                })&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Подсчитывает количество задач по определенному статусу.&#10;     *&#10;     * @param tasks  список задач&#10;     * @param status статус для фильтрации задач&#10;     * @return количество задач с указанным статусом&#10;     */&#10;    public static long countTasksByStatus(List&lt;Task&gt; tasks, Status status) {&#10;        return tasks.stream()&#10;                .filter(task -&gt; task.getStatus() == status)&#10;                .count();&#10;    }&#10;}&#10;```&#10;&#10;Теперь каждый метод в классе `Main` имеет Javadoc комментарий, который описывает его назначение, параметры и возвращаемое значение. Это улучшает документацию и делает код более понятным для других разработчиков." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1728548763906" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Task.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Status.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="86b815">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                </list>
              </option>
              <option name="id" value="86b815" />
              <option name="initiateTms" value="1728548528471" />
              <option name="request" value=" Вынеси     public enum Status {&#10;               OPEN, IN_PROGRESS, CLOSED&#10;           } в отдельный класс" />
              <option name="response" value="" />
              <option name="responseDescription" value="Конечно! Чтобы вынести `enum Status` в отдельный класс, мы создадим новый файл `Status.java` и переместим туда перечисление. Затем обновим класс `Task` для использования этого нового класса.&#10;&#10;### Шаг 1: Создание файла `Status.java`&#10;&#10;Создайте новый файл `Status.java` в пакете `ru.otus.java.pro.streamapi`:&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi;&#10;&#10;public enum Status {&#10;    OPEN, IN_PROGRESS, CLOSED&#10;}&#10;```&#10;&#10;### Шаг 2: Обновление класса `Task`&#10;&#10;Теперь обновим класс `Task` для использования `Status` из нового файла:&#10;&#10;```java&#10;package ru.otus.java.pro.streamapi;&#10;&#10;public class Task {&#10;    private final int id;&#10;    private final String name;&#10;    private final Status status;&#10;&#10;    public Task(int id, String name, Status status) {&#10;        this.id = id;&#10;        this.name = name;&#10;        this.status = status;&#10;    }&#10;&#10;    public int getId() {&#10;        return id;&#10;    }&#10;&#10;    public String getName() {&#10;        return name;&#10;    }&#10;&#10;    public Status getStatus() {&#10;        return status;&#10;    }&#10;&#10;    @Override&#10;    public String toString() {&#10;        return &quot;Task{&quot; +&#10;                &quot;id=&quot; + id +&#10;                &quot;, name='&quot; + name + '\'' +&#10;                &quot;, status=&quot; + status +&#10;                '}';&#10;    }&#10;}&#10;```&#10;&#10;### Шаг 3: Обновление класса `Main`&#10;&#10;Класс `Main` уже использует `Status` из пакета `ru.otus.java.pro.streamapi`, поэтому никаких изменений в нем не требуется. Убедитесь, что все импорты корректны и соответствуют новому расположению `Status`.&#10;&#10;Теперь у вас есть отдельный класс `Status`, который можно использовать в других частях вашего проекта, если это необходимо. Это улучшает организацию кода и делает его более модульным." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1728548534831" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/Main.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>