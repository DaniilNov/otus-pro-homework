<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="03de08ac-fd37-4f38-ae33-dc113f4d10c8" name="Changes" comment="Homework HTTP Protocol details v2">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServer.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServer.java" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="ExternalProjectsData">
    <projectState path="$PROJECT_DIR$">
      <ProjectState />
    </projectState>
  </component>
  <component name="ExternalProjectsManager">
    <system id="GRADLE">
      <state>
        <task path="$PROJECT_DIR$">
          <activation />
        </task>
        <projects_view>
          <tree_state>
            <expand>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="otus-pro-homeworks" type="f1a62948:ProjectNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="otus-pro-homeworks" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
              </path>
              <path>
                <item name="" type="6a2764b6:ExternalProjectsStructure$RootNode" />
                <item name="otus-pro-homeworks" type="f1a62948:ProjectNode" />
                <item name="Tasks" type="e4a08cd1:TasksNode" />
                <item name="build" type="c8890929:TasksNode$1" />
              </path>
            </expand>
            <select />
          </tree_state>
        </projects_view>
      </state>
    </system>
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="AnnotationType" />
        <option value="JUnit5 Test Class" />
        <option value="Class" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_BRANCH_BY_REPOSITORY">
      <map>
        <entry key="$PROJECT_DIR$" value="master" />
      </map>
    </option>
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="JsbtTreeLayoutManager">
    <layout place="tools.popupGrunt">
      <scroll-view-position x="0" y="0" />
    </layout>
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2mEYPu3STopufuLXHar9R1qrTau" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Downloaded.Files.Path.Enabled&quot;: &quot;false&quot;,
    &quot;Gradle.AccountServiceImplParametrizedTest.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Build otus-pro-homeworks.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Tests in 'impl'.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Tests in 'ru.otus.java.pro.unittests.bank.service.impl'.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.Upgrade Gradle wrapper.executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [:Application.main()].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [:HttpServer.main()].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [:HttpServerDemo.main()].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [:Main.main()].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [:MockChatServer.main()].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [build].executor&quot;: &quot;Run&quot;,
    &quot;Gradle.otus-pro-homeworks [dependencies].executor&quot;: &quot;Run&quot;,
    &quot;JUnit.AccountServiceImplParametrizedTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.AccountServiceImplTest.executor&quot;: &quot;Run&quot;,
    &quot;JUnit.ru.otus.java.pro.unittests.bank.service.impl in otus-pro-homeworks.main.executor&quot;: &quot;Run&quot;,
    &quot;Repository.Attach.Annotations&quot;: &quot;false&quot;,
    &quot;Repository.Attach.JavaDocs&quot;: &quot;false&quot;,
    &quot;Repository.Attach.Sources&quot;: &quot;false&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;SHARE_PROJECT_CONFIGURATION_FILES&quot;: &quot;true&quot;,
    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrary&quot;: &quot;JUnit5&quot;,
    &quot;com.intellij.testIntegration.createTest.CreateTestDialog.defaultLibrarySuperClass.JUnit5&quot;: &quot;&quot;,
    &quot;create.test.in.the.same.root&quot;: &quot;true&quot;,
    &quot;kotlin-language-version-configured&quot;: &quot;true&quot;,
    &quot;last_opened_file_path&quot;: &quot;C:/Users/xa86/IdeaProjects/learning-project/java-first-project&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;project.structure.last.edited&quot;: &quot;SDKs&quot;,
    &quot;project.structure.proportion&quot;: &quot;0.15&quot;,
    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;http.proxy&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  },
  &quot;keyToStringList&quot;: {
    &quot;DatabaseDriversLRU&quot;: [
      &quot;postgresql&quot;
    ]
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="C:\Users\xa86\IdeaProjects\learning-project\otus-pro-homeworks\src\main\test\ru\otus\java\pro\unittests\bank\service\impl" />
      <recent name="C:\Users\xa86\IdeaProjects\learning-project\otus-pro-homeworks\src\main\java\ru\otus\java\pro\unittests\bank" />
    </key>
    <key name="CreateTestDialog.Recents.Supers">
      <recent name="" />
    </key>
    <key name="CreateTestDialog.RecentsKey">
      <recent name="ru.otus.java.pro.unittests.bank.service.impl" />
    </key>
  </component>
  <component name="RunManager" selected="Application.HttpServerDemo">
    <configuration name="HttpServer" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ru.otus.java.pro.http.HttpServer" />
      <module name="otus-pro-homeworks.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ru.otus.java.pro.http.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="HttpServerDemo" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ru.otus.java.pro.http.HttpServerDemo" />
      <module name="otus-pro-homeworks.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ru.otus.java.pro.http.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Main" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ru.otus.java.pro.patterns.part2.Main" />
      <module name="otus-pro-homeworks.main" />
      <option name="PROGRAM_PARAMETERS" value="-Dfile.encoding=UTF-8" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ru.otus.java.pro.patterns.part2.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="MockChatServer" type="Application" factoryName="Application" temporary="true" nameIsGenerated="true">
      <option name="MAIN_CLASS_NAME" value="ru.otus.java.pro.dbinteraction.MockChatServer" />
      <module name="otus-pro-homeworks.main" />
      <extension name="coverage">
        <pattern>
          <option name="PATTERN" value="ru.otus.java.pro.dbinteraction.*" />
          <option name="ENABLED" value="true" />
        </pattern>
      </extension>
      <method v="2">
        <option name="Make" enabled="true" />
      </method>
    </configuration>
    <configuration name="Tests in 'ru.otus.java.pro.unittests.bank.service.impl'" type="GradleRunConfiguration" factoryName="Gradle" temporary="true">
      <ExternalSystemSettings>
        <option name="executionName" />
        <option name="externalProjectPath" value="$PROJECT_DIR$" />
        <option name="externalSystemIdString" value="GRADLE" />
        <option name="scriptParameters" value="" />
        <option name="taskDescriptions">
          <list />
        </option>
        <option name="taskNames">
          <list>
            <option value=":test" />
            <option value="--tests" />
            <option value="&quot;ru.otus.java.pro.unittests.bank.service.impl.*&quot;" />
          </list>
        </option>
        <option name="vmOptions" />
      </ExternalSystemSettings>
      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>
      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>
      <DebugAllEnabled>false</DebugAllEnabled>
      <RunAsTest>true</RunAsTest>
      <method v="2" />
    </configuration>
    <list>
      <item itemvalue="Application.HttpServer" />
      <item itemvalue="Application.HttpServerDemo" />
      <item itemvalue="Application.MockChatServer" />
      <item itemvalue="Application.Main" />
      <item itemvalue="Gradle.Tests in 'ru.otus.java.pro.unittests.bank.service.impl'" />
    </list>
    <recent_temporary>
      <list>
        <item itemvalue="Application.HttpServer" />
        <item itemvalue="Application.HttpServerDemo" />
        <item itemvalue="Application.MockChatServer" />
        <item itemvalue="Application.Main" />
        <item itemvalue="Gradle.Tests in 'ru.otus.java.pro.unittests.bank.service.impl'" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-jdk-9f38398b9061-18abd8497189-intellij.indexing.shared.core-IU-241.14494.240" />
        <option value="bundled-js-predefined-1d06a55b98c1-74d2a5396914-JavaScript-IU-241.14494.240" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="03de08ac-fd37-4f38-ae33-dc113f4d10c8" name="Changes" comment="" />
      <created>1726643186346</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1726643186346</updated>
      <workItem from="1726643187429" duration="738000" />
      <workItem from="1726643970714" duration="3310000" />
      <workItem from="1727240860064" duration="2417000" />
      <workItem from="1729670781657" duration="388000" />
      <workItem from="1731242419581" duration="815000" />
      <workItem from="1731397388336" duration="398000" />
      <workItem from="1731397797630" duration="52000" />
      <workItem from="1731397862883" duration="51000" />
      <workItem from="1731397921534" duration="127000" />
      <workItem from="1733036675617" duration="826000" />
      <workItem from="1735378616430" duration="2154000" />
      <workItem from="1735380846403" duration="25000" />
      <workItem from="1735381045136" duration="145000" />
      <workItem from="1735381202720" duration="25000" />
      <workItem from="1735381267551" duration="1280000" />
    </task>
    <task id="LOCAL-00001" summary="master-commit">
      <option name="closed" value="true" />
      <created>1726644698594</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1726644698594</updated>
    </task>
    <task id="LOCAL-00002" summary="Homework Reflection API и аннотации">
      <option name="closed" value="true" />
      <created>1726647111288</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1726647111288</updated>
    </task>
    <task id="LOCAL-00003" summary="Homework Reflection API и аннотации v2">
      <option name="closed" value="true" />
      <created>1727241031646</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1727241031646</updated>
    </task>
    <task id="LOCAL-00004" summary="Homework Stream Api v1">
      <option name="closed" value="true" />
      <created>1728549054044</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1728549054044</updated>
    </task>
    <task id="LOCAL-00005" summary="Homework Concurrency v1">
      <option name="closed" value="true" />
      <created>1729674000457</created>
      <option name="number" value="00005" />
      <option name="presentableId" value="LOCAL-00005" />
      <option name="project" value="LOCAL" />
      <updated>1729674000457</updated>
    </task>
    <task id="LOCAL-00006" summary="Homework Patterns part1 v1">
      <option name="closed" value="true" />
      <created>1731396034592</created>
      <option name="number" value="00006" />
      <option name="presentableId" value="LOCAL-00006" />
      <option name="project" value="LOCAL" />
      <updated>1731396034592</updated>
    </task>
    <task id="LOCAL-00007" summary="Homework Patterns part1 v1">
      <option name="closed" value="true" />
      <created>1731566488527</created>
      <option name="number" value="00007" />
      <option name="presentableId" value="LOCAL-00007" />
      <option name="project" value="LOCAL" />
      <updated>1731566488527</updated>
    </task>
    <task id="LOCAL-00008" summary="Homework HTTP Protocol details v1">
      <option name="closed" value="true" />
      <created>1735020577732</created>
      <option name="number" value="00008" />
      <option name="presentableId" value="LOCAL-00008" />
      <option name="project" value="LOCAL" />
      <updated>1735020577732</updated>
    </task>
    <option name="localTasksCounter" value="9" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="master-commit" />
    <MESSAGE value="Homework Reflection API и аннотации" />
    <MESSAGE value="Homework Reflection API и аннотации v2" />
    <MESSAGE value="Homework Stream Api v1" />
    <MESSAGE value="Homework Concurrency v1" />
    <MESSAGE value="Homework Patterns part1 v1" />
    <MESSAGE value="Homework HTTP Protocol details v1" />
    <option name="LAST_COMMIT_MESSAGE" value="Homework HTTP Protocol details v1" />
  </component>
  <component name="XSLT-Support.FileAssociations.UIState">
    <expand />
    <select />
  </component>
  <component name="com.github.evgenys91.machinet.common.dslhistory.DslHistoryState">
    <option name="historyDtoById">
      <map>
        <entry key="8225e4">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServer.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServerDemo.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Task.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpRequest.java" />
                </list>
              </option>
              <option name="id" value="8225e4" />
              <option name="initiateTms" value="1735382299649" />
              <option name="request" value=" Эти изменения ломают работу программы:&#10;13:37:20: Executing ':HttpServerDemo.main()'...&#10;&#10;&gt; Task :compileJava&#10;&gt; Task :processResources UP-TO-DATE&#10;&gt; Task :classes&#10;&#10;&gt; Task :HttpServerDemo.main()&#10;2024-12-28 13:37:36 ERROR ru.otus.java.pro.http.HttpServer - Error handling read&#10;java.nio.channels.ClosedChannelException: null&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.ensureOpenAndConnected(SocketChannelImpl.java:215)&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:403)&#10;&#9;at ru.otus.java.pro.http.HttpServer.lambda$handleRead$0(HttpServer.java:75)&#10;&#9;at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)&#10;&#9;at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)&#10;&#9;at java.base/java.lang.Thread.run(Thread.java:833)&#10;2024-12-28 13:37:36 ERROR ru.otus.java.pro.http.HttpServer - Error handling read&#10;java.nio.channels.ClosedChannelException: null&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.ensureOpenAndConnected(SocketChannelImpl.java:215)&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:403)&#10;&#9;at ru.otus.java.pro.http.HttpServer.lambda$handleRead$0(HttpServer.java:75)&#10;&#9;at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)&#10;&#9;at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)&#10;&#9;at java.base/java.lang.Thread.run(Thread.java:833)&#10;2024-12-28 13:37:38 ERROR ru.otus.java.pro.http.HttpServer - Error handling read&#10;java.nio.channels.ClosedChannelException: null&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.ensureOpenAndConnected(SocketChannelImpl.java:215)&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:403)&#10;&#9;at ru.otus.java.pro.http.HttpServer.lambda$handleRead$0(HttpServer.java:75)&#10;&#9;at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)&#10;&#9;at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)&#10;&#9;at java.base/java.lang.Thread.run(Thread.java:833)&#10;2024-12-28 13:37:38 ERROR ru.otus.java.pro.http.HttpServer - Error handling read&#10;java.nio.channels.ClosedChannelException: null&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.ensureOpenAndConnected(SocketChannelImpl.java:215)&#10;&#9;at java.base/sun.nio.ch.SocketChannelImpl.read(SocketChannelImpl.java:403)&#10;&#9;at ru.otus.java.pro.http.HttpServer.lambda$handleRead$0(HttpServer.java:75)&#10;&#9;at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:539)&#10;&#9;at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)&#10;&#9;at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)&#10;&#9;at java.base/java.lang.Thread.run(Thread.java:833)" />
              <option name="response" value="" />
              <option name="responseDescription" value="Проблема может быть связана с тем, что буфер не сбрасывается должным образом после обработки запроса, что приводит к некорректному чтению данных. Давайте внесем некоторые изменения, чтобы убедиться, что буфер правильно обрабатывается и сбрасывается.&#10;&#10;Вот обновленная версия метода `handleRead`, которая включает сброс буфера после обработки запроса:&#10;&#10;```java&#10;private void handleRead(SelectionKey key) {&#10;    SocketChannel socketChannel = (SocketChannel) key.channel();&#10;    ByteBuffer buffer = (ByteBuffer) key.attachment();&#10;    threadPool.submit(() -&gt; {&#10;        try {&#10;            if (!socketChannel.isOpen() || !socketChannel.isConnected()) {&#10;                return;&#10;            }&#10;&#10;            int bytesRead = socketChannel.read(buffer);&#10;            if (bytesRead == -1) {&#10;                socketChannel.close();&#10;                return;&#10;            }&#10;&#10;            if (buffer.position() &gt; MAX_REQUEST_SIZE) {&#10;                sendResponse(socketChannel, &quot;HTTP/1.1 413 Payload Too Large\r\n\r\n&quot;);&#10;                socketChannel.close();&#10;                return;&#10;            }&#10;&#10;            if (buffer.position() &gt; 0 &amp;&amp; buffer.get(buffer.position() - 1) == '\n') {&#10;                buffer.flip();&#10;                HttpRequest request = parseRequest(buffer);&#10;                if (request != null) {&#10;                    if (&quot;/shutdown&quot;.equals(request.getUri()) &amp;&amp; &quot;GET&quot;.equals(request.getMethod())) {&#10;                        sendResponse(socketChannel, &quot;HTTP/1.1 200 OK\r\n\r\nServer is shutting down.&quot;);&#10;                        running = false;&#10;                    } else {&#10;                        sendResponse(socketChannel, &quot;HTTP/1.1 200 OK\r\n\r\n&quot;);&#10;                    }&#10;                } else {&#10;                    sendResponse(socketChannel, &quot;HTTP/1.1 500 Internal Server Error\r\n\r\n&quot;);&#10;                }&#10;                socketChannel.close();&#10;                buffer.clear(); // Clear the buffer for the next read&#10;            }&#10;        } catch (IOException e) {&#10;            log.error(&quot;Error handling read&quot;, e);&#10;            try {&#10;                if (socketChannel.isOpen()) {&#10;                    socketChannel.close();&#10;                }&#10;            } catch (IOException ex) {&#10;                log.error(&quot;Error closing socket channel&quot;, ex);&#10;            }&#10;        }&#10;    });&#10;}&#10;```&#10;&#10;Также убедитесь, что метод `parseRequest` корректно обрабатывает буфер:&#10;&#10;```java&#10;private HttpRequest parseRequest(ByteBuffer buffer) {&#10;    try {&#10;        String method = readToken(buffer);&#10;        String uri = readToken(buffer);&#10;        skipLine(buffer);&#10;&#10;        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();&#10;        while (buffer.hasRemaining()) {&#10;            String line = readLine(buffer);&#10;            if (line.isEmpty()) {&#10;                break;&#10;            }&#10;            String[] header = line.split(&quot;: &quot;, 2);&#10;            if (header.length == 2) {&#10;                headers.put(header[0], header[1]);&#10;            }&#10;        }&#10;&#10;        Map&lt;String, String&gt; parameters = new HashMap&lt;&gt;();&#10;        if (uri.contains(&quot;?&quot;)) {&#10;            String[] uriParts = uri.split(&quot;\\?&quot;, 2);&#10;            uri = uriParts[0];&#10;            String[] params = uriParts[1].split(&quot;&amp;&quot;);&#10;            for (String param : params) {&#10;                String[] keyValue = param.split(&quot;=&quot;, 2);&#10;                if (keyValue.length == 2) {&#10;                    parameters.put(keyValue[0], keyValue[1]);&#10;                }&#10;            }&#10;        }&#10;&#10;        HttpRequest request = new HttpRequest();&#10;        request.setMethod(method);&#10;        request.setUri(uri);&#10;        request.setHeaders(headers);&#10;        request.setParameters(parameters);&#10;&#10;        return request;&#10;    } catch (Exception e) {&#10;        log.error(&quot;Error parsing request&quot;, e);&#10;        return null;&#10;    }&#10;}&#10;```&#10;&#10;Эти изменения должны помочь избежать проблем с закрытыми каналами и некорректным чтением данных из буфера." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1735382310064" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServerDemo.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServer.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/streamapi/model/Task.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpRequest.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
        <entry key="f47576">
          <value>
            <ChatHistoryModel>
              <option name="contextFilesPaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServer.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpRequest.java" />
                </list>
              </option>
              <option name="id" value="f47576" />
              <option name="initiateTms" value="1735382209357" />
              <option name="request" value=" В методе     private HttpRequest parseRequest(ByteBuffer buffer) {&#10;                 try {&#10;                     String requestString = new String(buffer.array(), 0, buffer.limit());&#10;                     String[] lines = requestString.split(&quot;\r\n&quot;);&#10;                     if (lines.length &lt; 1) {&#10;                         throw new IllegalArgumentException(&quot;Invalid HTTP request&quot;);&#10;                     }&#10;         &#10;                     String[] requestLine = lines[0].split(&quot; &quot;);&#10;                     if (requestLine.length &lt; 2) {&#10;                         throw new IllegalArgumentException(&quot;Invalid HTTP request line&quot;);&#10;                     }&#10;         &#10;                     String method = requestLine[0];&#10;                     String uri = requestLine[1];&#10;         &#10;                     Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();&#10;                     int i = 1;&#10;                     while (i &lt; lines.length &amp;&amp; !lines[i].isEmpty()) {&#10;                         String[] header = lines[i].split(&quot;: &quot;);&#10;                         if (header.length == 2) {&#10;                             headers.put(header[0], header[1]);&#10;                         }&#10;                         i++;&#10;                     }&#10;         &#10;                     Map&lt;String, String&gt; parameters = new HashMap&lt;&gt;();&#10;                     if (uri.contains(&quot;?&quot;)) {&#10;                         String[] uriParts = uri.split(&quot;\\?&quot;);&#10;                         uri = uriParts[0];&#10;                         String[] params = uriParts[1].split(&quot;&amp;&quot;);&#10;                         for (String param : params) {&#10;                             String[] keyValue = param.split(&quot;=&quot;);&#10;                             if (keyValue.length == 2) {&#10;                                 parameters.put(keyValue[0], keyValue[1]);&#10;                             }&#10;                         }&#10;                     }&#10;         &#10;                     HttpRequest request = new HttpRequest();&#10;                     request.setMethod(method);&#10;                     request.setUri(uri);&#10;                     request.setHeaders(headers);&#10;                     request.setParameters(parameters);&#10;         &#10;                     return request;&#10;                 } catch (Exception e) {&#10;                     log.error(&quot;Error parsing request&quot;, e);&#10;                     return null;&#10;                 }&#10;             }&#10;получил комментарий: очень много мусора генерируется при парсинге. На нио байтбуферах можно было хотя бы части мусора избежать" />
              <option name="response" value="" />
              <option name="responseDescription" value="Для улучшения производительности и уменьшения количества создаваемого мусора при парсинге HTTP-запроса, можно использовать более эффективные методы работы с `ByteBuffer`. Вместо создания множества строк и массивов, можно работать напрямую с буфером, используя его методы для чтения данных. Это позволит избежать создания временных объектов и уменьшить нагрузку на сборщик мусора.&#10;&#10;Вот обновленная версия метода `parseRequest`, которая использует `ByteBuffer` более эффективно:&#10;&#10;```java&#10;private HttpRequest parseRequest(ByteBuffer buffer) {&#10;    try {&#10;        buffer.flip();&#10;        String method = readToken(buffer);&#10;        String uri = readToken(buffer);&#10;        skipLine(buffer);&#10;&#10;        Map&lt;String, String&gt; headers = new HashMap&lt;&gt;();&#10;        while (buffer.hasRemaining()) {&#10;            String line = readLine(buffer);&#10;            if (line.isEmpty()) {&#10;                break;&#10;            }&#10;            String[] header = line.split(&quot;: &quot;, 2);&#10;            if (header.length == 2) {&#10;                headers.put(header[0], header[1]);&#10;            }&#10;        }&#10;&#10;        Map&lt;String, String&gt; parameters = new HashMap&lt;&gt;();&#10;        if (uri.contains(&quot;?&quot;)) {&#10;            String[] uriParts = uri.split(&quot;\\?&quot;, 2);&#10;            uri = uriParts[0];&#10;            String[] params = uriParts[1].split(&quot;&amp;&quot;);&#10;            for (String param : params) {&#10;                String[] keyValue = param.split(&quot;=&quot;, 2);&#10;                if (keyValue.length == 2) {&#10;                    parameters.put(keyValue[0], keyValue[1]);&#10;                }&#10;            }&#10;        }&#10;&#10;        HttpRequest request = new HttpRequest();&#10;        request.setMethod(method);&#10;        request.setUri(uri);&#10;        request.setHeaders(headers);&#10;        request.setParameters(parameters);&#10;&#10;        return request;&#10;    } catch (Exception e) {&#10;        log.error(&quot;Error parsing request&quot;, e);&#10;        return null;&#10;    }&#10;}&#10;&#10;private String readToken(ByteBuffer buffer) {&#10;    StringBuilder token = new StringBuilder();&#10;    while (buffer.hasRemaining()) {&#10;        char c = (char) buffer.get();&#10;        if (c == ' ' || c == '\r' || c == '\n') {&#10;            break;&#10;        }&#10;        token.append(c);&#10;    }&#10;    return token.toString();&#10;}&#10;&#10;private void skipLine(ByteBuffer buffer) {&#10;    while (buffer.hasRemaining()) {&#10;        char c = (char) buffer.get();&#10;        if (c == '\n') {&#10;            break;&#10;        }&#10;    }&#10;}&#10;&#10;private String readLine(ByteBuffer buffer) {&#10;    StringBuilder line = new StringBuilder();&#10;    while (buffer.hasRemaining()) {&#10;        char c = (char) buffer.get();&#10;        if (c == '\r') {&#10;            continue;&#10;        }&#10;        if (c == '\n') {&#10;            break;&#10;        }&#10;        line.append(c);&#10;    }&#10;    return line.toString();&#10;}&#10;```&#10;&#10;В этом коде:&#10;- Метод `readToken` читает токен (слово) из буфера до пробела или конца строки.&#10;- Метод `skipLine` пропускает текущую строку в буфере.&#10;- Метод `readLine` читает строку из буфера до конца строки.&#10;&#10;Эти методы позволяют избежать создания временных строк и массивов, что уменьшает количество мусора и улучшает производительность." />
              <option name="responseFileName" value="" />
              <option name="responseFilePath" value="" />
              <option name="responseTms" value="1735382219541" />
              <option name="usedLocalFilePaths">
                <list>
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpServer.java" />
                  <option value="$PROJECT_DIR$/src/main/java/ru/otus/java/pro/http/HttpRequest.java" />
                </list>
              </option>
            </ChatHistoryModel>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>